import AWS from 'aws-sdk';
import axios from 'axios';
import path from 'path';

// Configure AWS S3
const s3 = new AWS.S3({
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  region: process.env.AWS_REGION,
  signatureVersion: 'v4' // Ensure latest signature version
});

// Generate unique filename for logo
const generateLogoFilename = (companyName, type) => {
  const timestamp = new Date().getTime();
  const sanitizedCompanyName = companyName
    .toLowerCase()
    .replace(/[^a-z0-9]/g, '-');
  return `${sanitizedCompanyName}-${timestamp}-${type}.png`;
};

// Generate a pre-signed URL for accessing the uploaded file
// Note: Setting expiresIn to 0 or very large number for permanent access
const generatePreSignedUrl = async (bucket, key, expiresIn = 31536000) => { // Default to 1 year
  try {
    return await s3.getSignedUrl('getObject', {
      Bucket: bucket,
      Key: key,
      Expires: expiresIn // URL valid for extended period
    });
  } catch (error) {
    console.error('Error generating pre-signed URL:', error);
    throw new Error('Failed to generate file access URL');
  }
};

// Save logo to S3
export const saveLogo = async (imageUrl, config, userId = null) => {
  try {
    // Download image from source URL
    const response = await axios.get(imageUrl, { responseType: 'arraybuffer' });
    const buffer = Buffer.from(response.data, 'binary');

    // Generate filename
    const filename = generateLogoFilename(config.text, config.style);
    const key = `logos/generated/${filename}`;
    
    // Upload to S3 with server-side encryption
    const uploadResult = await s3.upload({
      Bucket: process.env.AWS_S3_BUCKET,
      Key: key,
      Body: buffer,
      ContentType: 'image/png',
      ServerSideEncryption: 'AES256', // Optional: server-side encryption
      Metadata: {
        // TODO: Implement daily logo generation limit
        // Potential implementation:
        // - Track number of logos generated by user today
        // - If > 5, throw an error
        // Example pseudo-code:
        // const logoCount = await countUserLogosToday(userId);
        // if (logoCount >= 5) {
        //   throw new Error('Daily logo generation limit exceeded');
        // }
        
        userId: userId ? userId.toString() : 'system', // Track who generated the logo
        companyName: config.text,
        style: config.style,
        color: config.color,
        size: config.size,
        font: config.font,
        generatedDate: new Date().toISOString()
      }
    }).promise();

    // Generate pre-signed URL for file access
    const preSignedUrl = await generatePreSignedUrl(
      process.env.AWS_S3_BUCKET, 
      key
    );

    return {
      url: preSignedUrl, // Use pre-signed URL instead of direct S3 URL
      filename: filename,
      path: key,
      originalLocation: uploadResult.Location // Keep original location for reference
    };
  } catch (error) {
    console.error('Error saving logo:', error);
    throw new Error('Failed to save logo');
  }
};

// Save uploaded logo
export const saveUploadedLogo = async (file, companyName, userId = null) => {
  try {
    const filename = generateLogoFilename(companyName, 'uploaded');
    const key = `logos/uploaded/${filename}`;
    
    const uploadResult = await s3.upload({
      Bucket: process.env.AWS_S3_BUCKET,
      Key: key,
      Body: file,
      ContentType: file.type,
      ServerSideEncryption: 'AES256', // Optional: server-side encryption
      Metadata: {
        // TODO: Implement daily logo upload limit
        // Similar to generation limit logic above
        
        userId: userId ? userId.toString() : 'system', // Track who uploaded the logo
        companyName: companyName,
        uploadDate: new Date().toISOString()
      }
    }).promise();

    // Generate pre-signed URL for file access
    const preSignedUrl = await generatePreSignedUrl(
      process.env.AWS_S3_BUCKET, 
      key
    );

    return {
      url: preSignedUrl, // Use pre-signed URL instead of direct S3 URL
      filename: filename,
      path: key,
      originalLocation: uploadResult.Location // Keep original location for reference
    };
  } catch (error) {
    console.error('Error saving uploaded logo:', error);
    throw new Error('Failed to save uploaded logo');
  }
};

// Optional: Method to get logo for a specific user
export const getUserLogo = async (logoPath, userId) => {
  try {
    // Retrieve metadata to verify user ownership
    const headData = await s3.headObject({
      Bucket: process.env.AWS_S3_BUCKET,
      Key: logoPath
    }).promise();

    // Check if the logo belongs to the user
    if (headData.Metadata.userId !== userId.toString()) {
      throw new Error('Unauthorized access to logo');
    }

    // Generate pre-signed URL
    return await generatePreSignedUrl(
      process.env.AWS_S3_BUCKET, 
      logoPath
    );
  } catch (error) {
    console.error('Error retrieving user logo:', error);
    throw new Error('Failed to retrieve logo');
  }
};

// Expose generatePreSignedUrl for use in other files
export { generatePreSignedUrl };